#ifndef _PROBABILITIES_H_
#define _PROBABILITIES_H_

struct probabilities {
    // assignment or method call
    short ASSIGNMENTORMETHODCALLSTATEMENT_ASSIGN = 75;
    short ASSIGNMENTORMETHODCALLSTATEMENT_METHOD_CALL = 25;
    // probabilities of assignment types
    short ASSIGNMENTORMETHODCALLSTATEMENT_ASSIGN_BIT = 100;
    short ASSIGNMENTORMETHODCALLSTATEMENT_ASSIGN_STRUCTLIKE = 0;
    // probabilities of method calls
    short ASSIGNMENTORMETHODCALLSTATEMENT_METHOD_ACTION = 44;
    short ASSIGNMENTORMETHODCALLSTATEMENT_METHOD_FUNCTION = 45;
    short ASSIGNMENTORMETHODCALLSTATEMENT_METHOD_TABLE = 15;
    short ASSIGNMENTORMETHODCALLSTATEMENT_METHOD_BUILT_IN = 1;

    // probabilities for statements
    short STATEMENT_SWITCH = 5;
    short STATEMENT_ASSIGNMENTORMETHODCALL = 85;
    short STATEMENT_IF = 3;
    short STATEMENT_RETURN = 2;
    short STATEMENT_EXIT = 3;
    short STATEMENT_BLOCK = 2;

    // probabilities for statements or declarations
    short STATEMENTORDECLARATION_VAR = 10;
    short STATEMENTORDECLARATION_CONSTANT = 10;
    short STATEMENTORDECLARATION_STATEMENT = 80;

    // probabilities for unary bit expressions
    short EXPRESSION_BIT_UNARY_NEG = 20;
    short EXPRESSION_BIT_UNARY_CMPL = 20;
    short EXPRESSION_BIT_UNARY_CAST = 10;
    short EXPRESSION_BIT_UNARY_FUNCTION = 50;
    // probabilities for binary bit expressions
    short EXPRESSION_BIT_BINARY_MUL = 5;
    short EXPRESSION_BIT_BINARY_DIV = 5;
    short EXPRESSION_BIT_BINARY_MOD = 5;
    short EXPRESSION_BIT_BINARY_ADD = 10;
    short EXPRESSION_BIT_BINARY_SUB = 10;
    short EXPRESSION_BIT_BINARY_ADDSAT = 10;
    short EXPRESSION_BIT_BINARY_SUBSAT = 10;
    short EXPRESSION_BIT_BINARY_LSHIFT = 5;
    short EXPRESSION_BIT_BINARY_RSHIFT = 5;
    short EXPRESSION_BIT_BINARY_BAND = 10;
    short EXPRESSION_BIT_BINARY_BOR = 10;
    short EXPRESSION_BIT_BINARY_BXOR = 10;
    short EXPRESSION_BIT_BINARY_CONCAT = 5;
    // probabilities for ternary bit expressions
    short EXPRESSION_BIT_BINARY_SLICE = 50;
    short EXPRESSION_BIT_BINARY_MUX = 50;
    // probabilities for bit expressions
    short EXPRESSION_BIT_VAR = 20;
    short EXPRESSION_BIT_INT_LITERAL = 5;
    short EXPRESSION_BIT_BIT_LITERAL = 25;
    short EXPRESSION_BIT_UNARY = 10;
    short EXPRESSION_BIT_BINARY = 20;
    short EXPRESSION_BIT_TERNARY = 10;

    // probabilities for boolean expressions
    short EXPRESSION_BOOLEAN_VAR = 15;
    short EXPRESSION_BOOLEAN_LITERAL = 20;
    short EXPRESSION_BOOLEAN_NOT = 35;
    short EXPRESSION_BOOLEAN_LAND = 5;
    short EXPRESSION_BOOLEAN_LOR = 5;
    short EXPRESSION_BOOLEAN_CMP = 10;
    short EXPRESSION_BOOLEAN_FUNCTION = 5;
    short EXPRESSION_BOOLEAN_BUILT_IN = 5;
    // probabilities for comparisons
    short EXPRESSION_BOOLEAN_CMP_EQU = 50;
    short EXPRESSION_BOOLEAN_CMP_NEQ = 50;

    // probabilities for structlike expressions
    short EXPRESSION_STRUCT_VAR = 50;
    short EXPRESSION_STRUCT_LITERAL = 30;
    short EXPRESSION_STRUCT_FUNCTION = 20;

    // probabilities for state transitions in the parser
    short P4STATE_TRANSITION_ACCEPT = 50;
    short P4STATE_TRANSITION_REJECT = 10;
    short P4STATE_TRANSITION_STATE = 30;
    short P4STATE_TRANSITION_SELECT = 10;

    short BASETYPE_BIT = 50;
    short BASETYPE_SIGNED_BIT = 0;
    short BASETYPE_VARBIT = 0;
    short BASETYPE_INT = 10;
    short BASETYPE_ERROR = 0;
    short BASETYPE_BOOL = 10;
    short BASETYPE_STRING = 0;
    short DERIVED_ENUM = 0;
    short DERIVED_HEADER = 5;
    short DERIVED_HEADER_STACK = 2;
    short DERIVED_STRUCT = 5;
    short DERIVED_HEADER_UNION = 0;
    short DERIVED_TUPLE = 0;
    short TYPE_VOID = 0;
    short TYPE_MATCH_KIND = 0;

    // probabilities for the types of constant declarations
    short CONSTANTDECLARATION_TYPE_BASE = 80;
    short CONSTANTDECLARATION_TYPE_STRUCT = 0;
    // probabilities for the base types in constant declarations
    short CONSTANTDECLARATION_BASETYPE_BIT = BASETYPE_BIT;
    short CONSTANTDECLARATION_BASETYPE_SIGNED_BIT = BASETYPE_SIGNED_BIT;
    short CONSTANTDECLARATION_BASETYPE_VARBIT = BASETYPE_VARBIT;
    short CONSTANTDECLARATION_BASETYPE_INT = BASETYPE_INT;
    short CONSTANTDECLARATION_BASETYPE_ERROR = BASETYPE_ERROR;
    short CONSTANTDECLARATION_BASETYPE_BOOL = BASETYPE_BOOL;
    short CONSTANTDECLARATION_BASETYPE_STRING = BASETYPE_STRING;
    short CONSTANTDECLARATION_DERIVED_ENUM = DERIVED_ENUM;
    short CONSTANTDECLARATION_DERIVED_HEADER = DERIVED_HEADER;
    short CONSTANTDECLARATION_DERIVED_HEADER_STACK = DERIVED_HEADER_STACK;
    short CONSTANTDECLARATION_DERIVED_STRUCT = DERIVED_STRUCT;
    short CONSTANTDECLARATION_DERIVED_HEADER_UNION = DERIVED_HEADER_UNION;
    short CONSTANTDECLARATION_DERIVED_TUPLE = DERIVED_TUPLE;
    short CONSTANTDECLARATION_TYPE_VOID = TYPE_VOID;
    short CONSTANTDECLARATION_TYPE_MATCH_KIND = TYPE_MATCH_KIND;

    // probabilities for the function return types
    short FUNCTIONDECLARATION_TYPE_BASE = 90;
    short FUNCTIONDECLARATION_TYPE_STRUCT = 9;
    // probabilities for the base types in function declarations
    short FUNCTIONDECLARATION_BASETYPE_BIT = BASETYPE_BIT;
    short FUNCTIONDECLARATION_BASETYPE_SIGNED_BIT = BASETYPE_SIGNED_BIT;
    short FUNCTIONDECLARATION_BASETYPE_VARBIT = BASETYPE_VARBIT;
    short FUNCTIONDECLARATION_BASETYPE_INT = 0;
    short FUNCTIONDECLARATION_BASETYPE_ERROR = BASETYPE_ERROR;
    short FUNCTIONDECLARATION_BASETYPE_BOOL = BASETYPE_BOOL;
    short FUNCTIONDECLARATION_BASETYPE_STRING = BASETYPE_STRING;
    short FUNCTIONDECLARATION_DERIVED_ENUM = DERIVED_ENUM;
    short FUNCTIONDECLARATION_DERIVED_HEADER = DERIVED_HEADER;
    short FUNCTIONDECLARATION_DERIVED_HEADER_STACK = DERIVED_HEADER_STACK;
    short FUNCTIONDECLARATION_DERIVED_STRUCT = DERIVED_STRUCT;
    short FUNCTIONDECLARATION_DERIVED_HEADER_UNION = DERIVED_HEADER_UNION;
    short FUNCTIONDECLARATION_DERIVED_TUPLE = DERIVED_TUPLE;
    short FUNCTIONDECLARATION_TYPE_VOID = 1;
    short FUNCTIONDECLARATION_TYPE_MATCH_KIND = TYPE_MATCH_KIND;

    // probabilities for types in header structures
    short HEADERTYPEDECLARATION_FIELD_BASE = 100;
    short HEADERTYPEDECLARATION_FIELD_STRUCT = 0;
    // probabilities for the base types in header type declarations
    short HEADERTYPEDECLARATION_BASETYPE_BIT = BASETYPE_BIT;
    short HEADERTYPEDECLARATION_BASETYPE_SIGNED_BIT = BASETYPE_SIGNED_BIT;
    short HEADERTYPEDECLARATION_BASETYPE_VARBIT = BASETYPE_VARBIT;
    short HEADERTYPEDECLARATION_BASETYPE_INT = 0;
    short HEADERTYPEDECLARATION_BASETYPE_ERROR = BASETYPE_ERROR;
    short HEADERTYPEDECLARATION_BASETYPE_BOOL = 0;
    short HEADERTYPEDECLARATION_BASETYPE_STRING = BASETYPE_STRING;
    short HEADERTYPEDECLARATION_DERIVED_ENUM = DERIVED_ENUM;
    short HEADERTYPEDECLARATION_DERIVED_HEADER = DERIVED_HEADER;
    short HEADERTYPEDECLARATION_DERIVED_HEADER_STACK = DERIVED_HEADER_STACK;
    short HEADERTYPEDECLARATION_DERIVED_STRUCT = DERIVED_STRUCT;
    short HEADERTYPEDECLARATION_DERIVED_HEADER_UNION = DERIVED_HEADER_UNION;
    short HEADERTYPEDECLARATION_DERIVED_TUPLE = DERIVED_TUPLE;
    short HEADERTYPEDECLARATION_TYPE_VOID = TYPE_VOID;
    short HEADERTYPEDECLARATION_TYPE_MATCH_KIND = TYPE_MATCH_KIND;

    // probabilities for the parameter direction
    short PARAMETER_DIR_IN = 33;
    short PARAMETER_DIR_OUT = 33;
    short PARAMETER_DIR_INOUT = 33;
    // probabilities for the base types in parameter declarations
    short PARAMETER_BASETYPE_BIT = BASETYPE_BIT;
    short PARAMETER_BASETYPE_SIGNED_BIT = BASETYPE_SIGNED_BIT;
    short PARAMETER_BASETYPE_VARBIT = BASETYPE_VARBIT;
    short PARAMETER_BASETYPE_INT = 0;
    short PARAMETER_BASETYPE_ERROR = BASETYPE_ERROR;
    short PARAMETER_BASETYPE_BOOL = 0;
    short PARAMETER_BASETYPE_STRING = BASETYPE_STRING;
    short PARAMETER_DERIVED_ENUM = DERIVED_ENUM;
    short PARAMETER_DERIVED_HEADER = DERIVED_HEADER;
    short PARAMETER_DERIVED_HEADER_STACK = 0;
    short PARAMETER_DERIVED_STRUCT = DERIVED_STRUCT;
    short PARAMETER_DERIVED_HEADER_UNION = DERIVED_HEADER_UNION;
    short PARAMETER_DERIVED_TUPLE = DERIVED_TUPLE;
    short PARAMETER_TYPE_VOID = TYPE_VOID;
    short PARAMETER_TYPE_MATCH_KIND = TYPE_MATCH_KIND;
    // probabilities for the directionless base types in parameter declarations
    short PARAMETER_NONEDIR_BASETYPE_BIT = PARAMETER_BASETYPE_BIT;
    short PARAMETER_NONEDIR_BASETYPE_SIGNED_BIT = PARAMETER_BASETYPE_SIGNED_BIT;
    short PARAMETER_NONEDIR_BASETYPE_VARBIT = PARAMETER_BASETYPE_VARBIT;
    short PARAMETER_NONEDIR_BASETYPE_INT = PARAMETER_BASETYPE_INT;
    short PARAMETER_NONEDIR_BASETYPE_ERROR = PARAMETER_BASETYPE_ERROR;
    short PARAMETER_NONEDIR_BASETYPE_BOOL = PARAMETER_BASETYPE_BOOL;
    short PARAMETER_NONEDIR_BASETYPE_STRING = PARAMETER_BASETYPE_STRING;
    short PARAMETER_NONEDIR_DERIVED_ENUM = PARAMETER_DERIVED_ENUM;
    short PARAMETER_NONEDIR_DERIVED_HEADER = PARAMETER_DERIVED_HEADER;
    short PARAMETER_NONEDIR_DERIVED_HEADER_STACK =
        PARAMETER_DERIVED_HEADER_STACK;
    short PARAMETER_NONEDIR_DERIVED_HEADER_UNION = DERIVED_HEADER_UNION;
    short PARAMETER_NONEDIR_DERIVED_STRUCT = DERIVED_STRUCT;
    short PARAMETER_NONEDIR_DERIVED_TUPLE = DERIVED_TUPLE;
    short PARAMETER_NONEDIR_TYPE_VOID = TYPE_VOID;
    short PARAMETER_NONEDIR_TYPE_MATCH_KIND = TYPE_MATCH_KIND;

    // probabilities for types in struct structures
    short STRUCTTYPEDECLARATION_FIELD_BASE = 75;
    short STRUCTTYPEDECLARATION_FIELD_STRUCT = 25;
    short STRUCTTYPEDECLARATION_FIELD_STACK = 0;
    // probabilities for the headers struct type
    short STRUCTTYPEDECLARATION_HEADERS_HEADER = 90;
    short STRUCTTYPEDECLARATION_HEADERS_STACK = 10;
    // probabilities for the base types in struct type declarations
    short STRUCTTYPEDECLARATION_BASETYPE_BIT = BASETYPE_BIT;
    short STRUCTTYPEDECLARATION_BASETYPE_SIGNED_BIT = BASETYPE_SIGNED_BIT;
    short STRUCTTYPEDECLARATION_BASETYPE_VARBIT = BASETYPE_VARBIT;
    short STRUCTTYPEDECLARATION_BASETYPE_INT = 0;
    short STRUCTTYPEDECLARATION_BASETYPE_ERROR = BASETYPE_ERROR;
    short STRUCTTYPEDECLARATION_BASETYPE_BOOL = BASETYPE_BOOL;
    short STRUCTTYPEDECLARATION_BASETYPE_STRING = BASETYPE_STRING;
    short STRUCTTYPEDECLARATION_DERIVED_ENUM = DERIVED_ENUM;
    short STRUCTTYPEDECLARATION_DERIVED_HEADER = DERIVED_HEADER;
    short STRUCTTYPEDECLARATION_DERIVED_HEADER_STACK = DERIVED_HEADER_STACK;
    short STRUCTTYPEDECLARATION_DERIVED_STRUCT = DERIVED_STRUCT;
    short STRUCTTYPEDECLARATION_DERIVED_HEADER_UNION = DERIVED_HEADER_UNION;
    short STRUCTTYPEDECLARATION_DERIVED_TUPLE = DERIVED_TUPLE;
    short STRUCTTYPEDECLARATION_TYPE_VOID = TYPE_VOID;
    short STRUCTTYPEDECLARATION_TYPE_MATCH_KIND = TYPE_MATCH_KIND;
    // probabilities for types in struct structures
    short TYPEDECLARATION_HEADER = 75;
    short TYPEDECLARATION_STRUCT = 25;
    short TYPEDECLARATION_UNION = 0;

    // probabilities for types in struct structures
    short TYPEDEFDECLARATION_BASE = 75;
    short TYPEDEFDECLARATION_STRUCTLIKE = 25;
    short TYPEDEFDECLARATION_STACK = 0;
    // probabilities for the base types in typedef declarations
    short TYPEDEFDECLARATION_BASETYPE_BIT = BASETYPE_BIT;
    short TYPEDEFDECLARATION_BASETYPE_SIGNED_BIT = BASETYPE_SIGNED_BIT;
    short TYPEDEFDECLARATION_BASETYPE_VARBIT = BASETYPE_VARBIT;
    short TYPEDEFDECLARATION_BASETYPE_INT = 0;
    short TYPEDEFDECLARATION_BASETYPE_ERROR = BASETYPE_ERROR;
    short TYPEDEFDECLARATION_BASETYPE_BOOL = 0;
    short TYPEDEFDECLARATION_BASETYPE_STRING = BASETYPE_STRING;
    short TYPEDEFDECLARATION_DERIVED_ENUM = DERIVED_ENUM;
    short TYPEDEFDECLARATION_DERIVED_HEADER = DERIVED_HEADER;
    short TYPEDEFDECLARATION_DERIVED_HEADER_STACK = DERIVED_HEADER_STACK;
    short TYPEDEFDECLARATION_STRUCT = DERIVED_STRUCT;
    short TYPEDEFDECLARATION_HEADER_UNION = DERIVED_HEADER_UNION;
    short TYPEDEFDECLARATION_TUPLE = DERIVED_TUPLE;
    short TYPEDEFDECLARATION_TYPE_VOID = TYPE_VOID;
    short TYPEDEFDECLARATION_TYPE_MATCH_KIND = TYPE_MATCH_KIND;

    // probabilities for the types of constant declarations
    short VARIABLEDECLARATION_TYPE_BASE = 80;
    short VARIABLEDECLARATION_TYPE_STRUCT = 15;
    short VARIABLEDECLARATION_TYPE_STACK = 5;
    // probabilities for the base types in variable declarations
    short VARIABLEDECLARATION_BASETYPE_BIT = BASETYPE_BIT;
    short VARIABLEDECLARATION_BASETYPE_SIGNED_BIT = BASETYPE_SIGNED_BIT;
    short VARIABLEDECLARATION_BASETYPE_VARBIT = BASETYPE_VARBIT;
    short VARIABLEDECLARATION_BASETYPE_INT = 0;
    short VARIABLEDECLARATION_BASETYPE_ERROR = BASETYPE_ERROR;
    short VARIABLEDECLARATION_BASETYPE_BOOL = BASETYPE_BOOL;
    short VARIABLEDECLARATION_BASETYPE_STRING = BASETYPE_STRING;
    short VARIABLEDECLARATION_DERIVED_ENUM = DERIVED_ENUM;
    short VARIABLEDECLARATION_DERIVED_HEADER = DERIVED_HEADER;
    short VARIABLEDECLARATION_DERIVED_HEADER_STACK = DERIVED_HEADER_STACK;
    short VARIABLEDECLARATION_DERIVED_STRUCT = DERIVED_STRUCT;
    short VARIABLEDECLARATION_DERIVED_HEADER_UNION = DERIVED_HEADER_UNION;
    short VARIABLEDECLARATION_DERIVED_TUPLE = DERIVED_TUPLE;
    short VARIABLEDECLARATION_TYPE_VOID = TYPE_VOID;
    short VARIABLEDECLARATION_TYPE_MATCH_KIND = TYPE_MATCH_KIND;
};
extern probabilities PCT;

struct declarations {
    // minimum and maximum number of type declarations
    short MIN_TYPE = 1;
    short MAX_TYPE = 8;

    // minimum and maximum number of statements in a block statement
    short BLOCKSTATEMENT_MIN_STAT = 3;
    short BLOCKSTATEMENT_MAX_STAT = 10;

    // minimum and maximum number of callable declarations
    short MIN_CALLABLES = 0;
    short MAX_CALLABLES = 4;

    // minimum and maximum variable declarations
    short MIN_VAR = 0;
    short MAX_VAR = 5;

    short MIN_INSTANCE = 0;
    short MAX_INSTANCE = 5;

    short MIN_ACTION = 0;
    short MAX_ACTION = 2;

    short MIN_TABLE = 0;
    short MAX_TABLE = 3;
};

extern declarations DECL;

#endif
